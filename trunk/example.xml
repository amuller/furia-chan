<?xml version="1.0"?>
<!-- 
     Utility script for developers and for running Furia examples.
-->

<project name="FuriaDevel" xmlns:artifact="urn:maven-artifact-ant">

<target name="init">
	<!-- ant maven tasks related properties -->
	<property name="anttask" value="maven-ant-tasks-2.0.6.jar"/>
	<property name="jardownloadlocation" value="http://ftp.kddilabs.jp/infosystems/apache/maven/binaries/"/>
	<property name="destlocation" value="${ant.home}/lib/"/>
	

	<!-- source base directory-->
	<property name="source" value=""/>
	<!-- target base directory-->
	<property name="target" value=""/>

</target>

<!-- check if maven tasks have been downloaded -->
<target name="checkprerequisites">
<condition property="mavenanttaskavailable">
      <available file="${destlocation}/${anttask}"/>
</condition>
</target>

<!-- download maven tasks -->
<target name="downloadprerequisites" unless="mavenanttaskavailable" depends="checkprerequisites, init">

	<get src="${jardownloadlocation}/${anttask}" dest="${destlocation}/${anttask}"/>
	
</target>

<!-- initialize maven tasks-->
<target name="maven" depends="init, downloadprerequisites">
	
	<path id="maven-ant-tasks.classpath" path="${destlocation}/${anttask}" />
	<typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant"
           classpathref="maven-ant-tasks.classpath" />
	<!-- access maven project -->
	<artifact:pom id="project" file="pom.xml" />
	<!-- define the classpath -->

	
	<!-- generate the classpath -->
	<artifact:dependencies pathId="dependency.classpath">
      <pom refid="project"/>
  </artifact:dependencies>
	
	<!-- DB and QUERY datafiles -->

	<property name="dbdata" value="${user.home}/temp/slices"/>
	<property name="querydata" value="${user.home}/temp/slices-query"/>
</target>


 
<target name="fragment" depends="maven">
	 <delete dir="${user.home}/ALMACEN/BigDB/Base"/>

	    <java dir="${project.build.outputDirectory}" fork="yes" classpath="${project.build.outputDirectory}:${project.build.testOutputDirectory}" classpathref="dependency.classpath" classname="org.kit.furia.BytecodeFrag"  failonerror="true">
				<!--<jvmarg value="-ea" />-->
				<jvmarg value="-server" />
				<jvmarg value="-Xmx4000M" />
				<arg value="-dm"/>
				<arg value="-input"/>
				<arg value="${user.home}/ALMACEN/SCAM/JPackageClass/"/>
				<arg value="-output"/>
				<arg value="${user.home}/ALMACEN/BigDB/Base"/>
			</java>

	    <java dir="${project.build.outputDirectory}" fork="yes" classpath="${project.build.outputDirectory}:${project.build.testOutputDirectory}" classpathref="dependency.classpath" classname="org.kit.furia.BytecodeFrag"  failonerror="true">
				<!--<jvmarg value="-ea" />-->
				<jvmarg value="-server" />
				<jvmarg value="-Xmx4000M" />
				<arg value="-dm"/>
				<arg value="-input"/>
				<arg value="${user.home}/ALMACEN/SCAM/JPackageClassObfuscatedZelix/"/>
				<arg value="-output"/>
				<arg value="${user.home}/ALMACEN/BigDB/Zelix"/>
			</java>


			<java dir="${project.build.outputDirectory}" fork="yes" classpath="${project.build.outputDirectory}:${project.build.testOutputDirectory}" classpathref="dependency.classpath" classname="org.kit.furia.BytecodeFrag"  failonerror="true">
				<!--<jvmarg value="-ea" />-->
				<jvmarg value="-server" />
				<jvmarg value="-Xmx4000M" />
				<arg value="-dm"/>
				<arg value="-input"/>
				<arg value="${user.home}/ALMACEN/SCAM/JPackageClassObfuscatedSandMarkNoClassEnc/"/>
				<arg value="-output"/>
				<arg value="${user.home}/ALMACEN/BigDB/SandMark"/>
			</java>
</target>
<!-- this task prints the classpath as it is being used in this machine.
		 useful if you are using Emacs or JDE, or hacking Furia
     -->
<target name="printClassPathForJDE" depends="maven">
	<property name="text" refid="dependency.classpath"/>
	<echo>${text}:${project.build.outputDirectory}:${project.build.testOutputDirectory}:/usr/share/java/jde.jar</echo>
</target>


</project>
